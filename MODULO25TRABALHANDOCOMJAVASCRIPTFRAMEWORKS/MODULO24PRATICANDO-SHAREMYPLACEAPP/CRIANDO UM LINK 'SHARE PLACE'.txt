








----------> DEVEMOS COMEÇAR PELO BÁSICO.






DEVEMOS TENTAR FAZER COM QUE NÓS 


CONSIGAMOS NÃO SÓ AS COORDENADAS PARA UM DETERMINADO ENDEREÇO INPUTTADO PELO USUÁRIO, 



mas também UM ENDEREÇO PARA ______COORDENADAS____ que nós talvez inputtemos/inputtemos no código....





DEVEMOS FAZER ISSO PARA QUE SEJAMOS CAPAZES 

DE ARMAZENAR 


TANTO AS COORDENADAS COMO O ENDEREÇO  em constantes...




PQ O PROFESSOR QUER TER TANTO AS COORDENADAS COMO O ENDEREÇO, ele quer ter 


ambos os dados PARA QUE ELES POSSA FAZER DISPLAY DELES AO USUÁRIO QUANDO 

TIVERMOS AQUELE 'SHAREABLE LINK'...





Dentro de 'Location.js' PODEMOS ADICIONAR ____OUTRA FUNÇÃO____.



Colocamos em cima da outra função, mas não faz diferença.






SERÁ OUTRA ASYNC FUNCTION, OUTRA ASYNC FUNCTION QUE EXPORTAREI, CHAMADA 

DE 

'getAddressfromCoords'  (É BASICAMENTE O OPOSTO DA NOSSA FUNÇÃO 'getCoordsFromAddress')



ex:





export async function getAddressfromCoords() {

};




----------------------------------------




DENTRO DESSA FUNÇÃO, O PROFESSOR VAI ESPERAR RECEBER ALGUMAS 'coords' (coordinates) 


COMO PARÂMETRO...



ex:





export async function getAddressfromCoords(coords) {

};




----------------------------------------



ISSO QUER DIZER QUE ELE VAI ESPERAR UM OBJETO COM ALGUMAS COORDENADAS, 

COM AS PROPRIEDADES 'lat' e 'lng'............


MUNIDO DESSE OBJETO, o professor vai usar 

O MESMO 

"GOOGLE API" de 'maps' (aquela url de 'https://maps.googleapis.com/maps/api/geocode/....')



PARA CONSEGUIR O ADDRESS POR MEIO DESSAS COORDENADAS..






PROFESSOR QUER USAR ESSA API (a do google) __________pQ ELA ____________ FUNCIONA 

NAS DUAS DIREÇÕES: 


ELA FUNCIONA 


address ---> coordinates 


coordinates ---> address.




OU SEJA, PODEMOS FAZER UM __rEVERSE LOOKUP__, passar COORDENADAS e GANHAR UM ADDRESS...




------> é isso que queremos fazer...




nós pegamos o link, dentro da página do google maps platform, do 'reverse geocoding request and response (address lookup)'...





O LINK EM QUESTÃO É ESTE:





https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=YOUR_API_KEY




Esse é um 'link-exemplo' que pode ser utilizado por nós para 

fazer a conversão coordenadas-endereço.





-----------------------------------------






aí, lá dentro da função 'async' a ser exportada, colocamos 



um FETCH REQUEST....




AÍ FAZEMOS A MESMA COISA DE ANTES, SUBSTITUIMOS 


A 'API KEY' E AS COORDENADAS/ENDEREÇO 


DA URL por valores DINÂMICOS (com `` e ${})





USAMOS, NA KEY, A MESMA CONSTANTE 'GOOGLE_API_KEY' QUE HAVÍAMOS CRIADO...




E em 'latlng', COLOCAMOS 2 INJEÇÕES DINÂMICAS: "${},${}"...





ex:




export async function getAddressfromCoords(coords) {
    fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${coords.lat},${coords.lng}&key=${GOOGLE_API_KEY}`)
}



----------------------------------




na latitude, vou querer inserir 'coords.lat' (PQ 'coords' DEVERÁ/VAI SER UM OBJETO COORDS COM UMA PROPRIEDADE 'lat'...)

e 'coords.lng'.



ISSO FARÁ COM QUE ESSA INFORMAÇÃO SEJA 'FORWARDEADA' nessa string que será USADA NO HTTP REQUEST 

DE FETCH (http request de tipo GET).





COMO NÓS USAMOS ASYNC ANTES, DEVEMOS USAR ASYNC AQUI TBM...




Colocamos um AWAIT nesse 'fetch' E ENTÃO ARMAZENAMOS ESSE AWAIT DE FETCH, ESSA PROMISE, 


em uma constante de nome 

'response' (exatamente como antes).



ex:





export async function getAddressfromCoords(coords) {
  const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${coords.lat},${coords.lng}&key=${GOOGLE_API_KEY}`)
}






--------------------------------------------





AGORA O PROFESSOR SIMPLESMENTE COPIA AQUELE 'if check' de response QUE HAVÍAMOS COLOCADO NO 'getCoordsFromAddress'

NESSA NOVA FUNÇÃO ASSÍNCRONA de 'getAddressfromCoords'...



ex:






export async function getAddressfromCoords(coords) {
  const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${coords.lat},${coords.lng}&key=${GOOGLE_API_KEY}`)

  if(!response.ok) {
      throw new Error('Failed to fetch address. Please try again!');
  } 
  const data = await response.json();
  if(data.error_message) {
      throw new Error(data.error_message);
  }

}


-----------------------------



Certo.




------------------------------------



DEPOIS DESSES IF CHECKS, VOU SABER QUE O PROCESSO FUNCIONOU E QUE AGORA TEREI UM ___ENDEREÇO____ A PARTIR DAS COORDENADAS.






CERTO, MAS COMO CONSEGUIMOS ESSE ADDRESS? 

COMO CONSEGUIMOS MANIPULAR A 'RESPONSE' DA API DO GOOGLE PARA 

NOS DAR O OBJETO 


COM 


O 


'ADDRESS'?




PROFESSOR DÁ UMA OLHADA NA 'EXAMPLE RESPONSE' que há no site do google maps platform....




Geocoding request and response (latitude/longitude lookup)





Below is a sample geocoding response, in JSON:



...




(É ESSE O TRECHO DO SITE)...



SE analisarmos 


esse objeto 'geocoding response',



veremos 


que ele é 



UM OBJETO COM 



UMA KEY 'RESULTS'..... 


ESSA KEY É UM ARRAY....



DENTRO DESSE ARRAY, O PRIMEIRO ELEMENTO 


É um field 

chamado 

de 


'formated_address' -------> ESSE CAMPO É EXATAMENTE A INFORMAÇÃO DE QUE 

PRECISO, O ENDEREÇO QUE VOU QUERER MOSTRAR AO USUÁRIo (e o endereço que foi convertido a partir das coordenadas).




----------------------------------





É por isso que 

o professor 

vai criar 

uma const 


e armazenar O CAMINHO DESSE CAMPO aí, desse campo que tem o valor do endereço que queremos...



Aí ele faz o RETURN DESSE VALOR, por meio de 'return address'...


ex:





export async function getAddressfromCoords(coords) {
  const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${coords.lat},${coords.lng}&key=${GOOGLE_API_KEY}`)

  if(!response.ok) {
      throw new Error('Failed to fetch address. Please try again!');
  } 
  const data = await response.json();
  if(data.error_message) {
      throw new Error(data.error_message);
  }
  const address = data.results[0].formatted_address; ///////EIS O CÓDIGO EM QUESTÃO.
  return address;
}




------------------------------------




PROFESSOR EXPLICA QUE, COMO NÓS UTILIZAMOS 'ASYNC/AWAIT', esse 

'return address' SERÁ O QUE ESSA NOSSA FUNÇÃO INVISIVELMENTE "RESOLVERÁ" em (will resolve to)...




------------------------------



Com isso, podemos chamar 


'getAddressfromCoords()' NO 




ARQUIVO 'SharePlace.js', 


NO LOCAL EM QUE 


_____LOCALIZAMOS O USUÁRIO___....


(ou seja, é LÁ NA FUNÇÃO DE SUCESSO 

DE 'getCurrentPosition()')..........





O PROFESSOR VAI QUERER ARMAZENAR, LÁ, ESSE VALOR DO ENDEREÇO EM UMA 
___CONST___ de nome 'address'...



ELE TAMBÉM 


COLOCA UM 'AWAIT' dessa função getAddressfromCoords,


POIS ELA DEVERÁ SER USADA DE FORMA ASSÍNCRONA.... (deve ser conseguido
o endereço a partir das coordenadas antes de ser continuada a execução do código...)


Como adicionamos 'await' no call dessa função, somos 


obrigados a adicionar 'async' à FUNÇÃO 'locateUserHandler'...

(e ao "successResult" da função "getCurrentPosition()")



ex:





 async locateUserHandler() {  ///////EIS O CÓDIGO EM QUESTÃO.
    if (!navigator.geolocation) {
      alert(
        'Location feature is not available in your browser - please use a more modern one'
      );
      return;
    }

    const modal = new Modal(
      'loading-modal-content',
      'Loading location - please wait'
    );
    modal.show();
    navigator.geolocation.getCurrentPosition(
     async successResult => {
        //console.log(successResult);
        modal.hide();
        const coordinates = {
          lat: successResult.coords.latitude,
          lng: successResult.coords.longitude,
        };
        const address = await getAddressfromCoords(); /////EIS O CÓDIGO EM QUESTÃO.
        this.selectPlace(coordinates);
      },
      (error) => {
        modal.hide();
        alert(
          'Could not locate you, unfortunately. Please enter an address manually!'
        );
      }
    );
  }




  ----------------------------



  POr fim, o professor faz forward do OBJETO 'coordinates' QUE ESTAMOS CONSTRUINDO EM 'locateUserHandler'

à ESSA FUNÇÃO ASSÍNCRONA 'getAddressfromCoords()'....





ex:



 async locateUserHandler() {  ///////EIS O CÓDIGO EM QUESTÃO.
    if (!navigator.geolocation) {
      alert(
        'Location feature is not available in your browser - please use a more modern one'
      );
      return;
    }

    const modal = new Modal(
      'loading-modal-content',
      'Loading location - please wait'
    );
    modal.show();
    navigator.geolocation.getCurrentPosition(
    async successResult => {
        //console.log(successResult);
        modal.hide();
        const coordinates = {
          lat: successResult.coords.latitude,
          lng: successResult.coords.longitude,
        };
        const address = await getAddressfromCoords(coordinates); /////EIS O CÓDIGO EM QUESTÃO.
        this.selectPlace(coordinates);
      },
      (error) => {
        modal.hide();
        alert(
          'Could not locate you, unfortunately. Please enter an address manually!'
        );
      }
    );
  }



-------------------------------




O professor também troca de lugar o 'modal.hide()', coloca-o depois de 'getAddressfromCoords',
 pois ele só vai querer
esconder o modal quando esse processo de conversão de coordenadas TIVER ACABADO.





ex:




 async locateUserHandler() { 
    if (!navigator.geolocation) {
      alert(
        'Location feature is not available in your browser - please use a more modern one'
      );
      return;
    }

    const modal = new Modal(
      'loading-modal-content',
      'Loading location - please wait'
    );
    modal.show();
    navigator.geolocation.getCurrentPosition(
      async successResult => {
        //console.log(successResult);
        const coordinates = {
          lat: successResult.coords.latitude,
          lng: successResult.coords.longitude,
        };
        const address = await getAddressfromCoords(coordinates); 
        modal.hide(); //////eis o código em questão.
        this.selectPlace(coordinates);
      },
      (error) => {
        modal.hide();
        alert(
          'Could not locate you, unfortunately. Please enter an address manually!'
        );
      }
    );
  }



-------------------------------------------------------





Mas o professor não terminou por aqui:



ele ainda precisa forwardar essa constante 'address' ÀQUELA FUNÇÃO 

'selectPlace'...


ex:

this.selectPlace(coordinates, address);



----------------------------------------------




Além disso, naquele nosso outro método, em 'findAddressHandler', 



'selectPlace' DEVERÁ ALI NO 'TRY BLOCK' TENTAR CONSEGUIR NÃO SÓ as 'coordinates', 

MAS 

TAMBÉM O 'address'....


TAMBÉM DEVO MUDAR OS PARÂMETROS 

DA FUNÇÃO 'selectPlace' EM SI, ALTERÁ-LA PARA QUE 



ACEITE 'address'  TAMBÉM...


ex:



selectPlace(coordinates, address) {
  ....
}




------------------------------





COM ESSAS MUDANÇAS, AGORA PODEMOS SETTAR 


UM 'SHAREABLE LINK', 


UM ___lINK____ QUE NOS LEVARÁ 

ÀQUELE NOSSO ___SEGUNDO ARQUIVO__ HTML...,



NESSE OUTRO ARQUIVO HTML NÓS VAMOS 


FAZER ____O DISPLAY___ DE UM ADDRESS E 

DE UM MAPA COM AS COORDENADAS...



------------------------------------


É em 'selectPlace' QUE DEVEMOS INSERIR ESSA FUNCIONALIDADE...




Em 'selectPlace', EU NÃO QUERO APENAS FAZER O RENDER DO MAPA, 

mas 

também CRIAR 


UM 'SHAREABLE LINK' e OUTPUTTAR ESSE LINK 


LÁ no input 'share-link' NO NOSSO HTML....




ex:



<section id="share-controls">
  <input
  id="share-link"
  type="text"
  readonly
  value="Select a place to get a shareable link."
  />
    <button id="share-btn" disabled>Share Place</button>

-----------------------------------------------------



O PROFESSOR QUER QUE, QUANDO O BOTÃO FOR CLICADO PELO USUÁRIO, O 


'SHAREABLE LINK' SEJA ___Copiado____ NO CLIPBOARD DO USUÁRIo....


-----------------------------------------




Feita essa explicação, voltamos ao 

'shareplace.js', em 


'selectPlace'...




NESSE NEGÓCIO, DEVEMOS CONSEGUIR ACESSO 



AO 'share-btn'...


Podemos fazer isso por meio de 


'const shareBtn = document.getElementById('share-btn');'




---------------------------------------


ex:







  selectPlace(coordinates, address) {
    if (this.map) {
      this.map.render(coordinates); ////essa parte é confusa. Não entendi tão bem.
    } else {
      this.map = new Map(coordinates);
    }


    const shareBtn = document.getElementById('share-btn');
  }



  -------------------------------------





  PROFESSOR DIZ QUE ISSO ESTÁ CERTO, MAS QUE ELE QUER, em vez disso, 

  DEFINIR ESSE ACESSO ___NO NOSSO CONSTRUCTOR___, POIS NO NOSSO CONSTRUCTOR 

  NÓS TAMBÉM GANHAMOS/FIZEMOS GANHAR ACESSO AOS OUTROS BOTÕES E ASSIM POR DIANTE...


  ex:




  class PlaceFinder {
  constructor() {
    const addressForm = document.querySelector('form');
    const locateUserBtn = document.getElementById('locate-btn');
  const shareBtn = document.getElementById('share-btn'); ///////eis o código em questão.

    locateUserBtn.addEventListener('click', this.locateUserHandler.bind(this)); ///isso é necessário.
    addressForm.addEventListener('submit', this.findAddressHandler.bind(this));
  }



--------------------------------------------------------




ELE TAMBÉM DIZ QUE VAI QUERER ARMAZENAR ESSE ACESSO/BOTÃO EM 

______UMA PROPRIEDADE_____, E NÃO EM UMA CONSTANTE...



Ele faz isso por meio de 'this.shareBtn =xxx'




ex:






  class PlaceFinder {
  constructor() {
    const addressForm = document.querySelector('form');
    const locateUserBtn = document.getElementById('locate-btn');
  this.shareBtn = document.getElementById('share-btn'); ///////eis o código em questão.

    locateUserBtn.addEventListener('click', this.locateUserHandler.bind(this)); ///isso é necessário.
    addressForm.addEventListener('submit', this.findAddressHandler.bind(this));
  }



---------------------------------------------------------




ISSO FEITO, ELE DECIDE ADICIONAR UM EVENTLISTENER A ESSE BOTÃO/PROPRIEDADE,

por meio do código 


'this.shareBtn.addEventListener('click', xxxx)'





ex:





  class PlaceFinder {
  constructor() {
    const addressForm = document.querySelector('form');
    const locateUserBtn = document.getElementById('locate-btn');
  this.shareBtn = document.getElementById('share-btn'); 

    locateUserBtn.addEventListener('click', this.locateUserHandler.bind(this)); 
    this.shareBtn.addEventListener('click', );  /////////eis o código em questão.
    addressForm.addEventListener('submit', this.findAddressHandler.bind(this));
  }



---------------------------------------------------





ELE DIZ QUE VAMOS HOOKAR ESSE NEGÓCIO EM UM MÉTODO LOGO LOGO... 




ATÉ O MOMENTO, conseguimos acesso ao 'share-btn'... nós 

podemos usar essa propriedade 'this.shareBtn'



EM 

'SELECTPLACE'...





Professor diz que podemos usar em 'selectPlace' PQ INICIALMENTE 


__________ ESSE BOTÃO ___ DEVERÁ/DEVE ESTAR ____DISABLED___, 

pois ele colocou um atributo de 'DISABLED' nesse elemento, no html....




Ele fez isso para que EM 

'SharePlace.js', 

LÁ NO 'selectPlace',


AGORA QUE NÓS REALMENTE TEMOS UM ___ADDRESS__,

o professor pudesse definir, em 'selectPlace',


'this.shareBtn.disabled = false'....




ELE VAI FAZER ISSO PARA ________________ENABLAR______________ O BOTÃO  (ele vai desabilitar o 'disable', basicamente, desabilitar o atributo 'disable')

ASSIM QUE ESSE PROCESSO DE 'selectPlace' (esse GET do address e das coordenadas/mapa) 
TENHA ACABADO....



EX (REPRESENTAÇÃO):












  selectPlace(coordinates, address) {
    if (this.map) {
      this.map.render(coordinates); 
    } else {
      this.map = new Map(coordinates);
    }
    this.shareBtn.disabled = false; ///////////EIS O CÓDIGO EM QUESTÃO.
  }




-------------------------------------------------






O PROFESSOR VAI QUERER ACESSO, EM 'selectPlace', ÀQUELE INPUT 


DO 'sharedLink' QUE SERÁ PRODUZIDO (por trás das cenas)....




Por isso ele vai criar uma constante de nome 


'sharedLinkinputElement'...


ex:




const sharedLinkinputElement


----------------------------------



Essa constante VAI GANHAR ACESSO AO ELEMENTO 'INPUT' 

DE ID 'share-link' QUE FICA LOGO AO LADO DO BOTÃO 'share-btn'...




esse input tem um id de 'share-link', e é isso que o professor utilizará....






ex:


const sharedLinkinputElement = document.getElementById('share-link');







---------------------------------------------------------------





DENTRO DO 'sharedLinkInputElement', 

O PROFESSOR VAI QUERER DEFINIR 


O ________VALOR___________ DESSA CONSTANTE/elemento 


COMO SENDO um ______Link_________, UM 


LINK ____ QUE O PROFESSOR/NÓS ___ VAMOS CONSTRUIR AGORA, EM SEGUIDA...





O PROFESSOR CONSTRUIRÁ ESSE LINK COMO UM _____TEMPLATE___ LITERAL_____...


ou seja, ${} e ``, 

PARA 

QUE CONSIGAMOS CONSTRUÍ-LO DE UMA MANEIRA FORTE E FÁCIL.




ex:





sharedLinkInputElement.value  = ``;





---------------------------------------




NESSE NEGÓCIO, O PROFESSOR VAI QUERER COMEÇAR ___PELO ___ 'SERVER ADDRESS ATUAL' (current server address)...



E NÓS CONSEGUIMOS ISSO 

POR MEIO 

DO 


ACESSO AO OBJETO 'location', sobre o qual 

APRENDEMOS mais cedo no curso, 


E O ACESSO à SUA PROPRIEDADE DENOMINADA 'origin'...



'origin' ------------> ESSA PROPRIEDADE NOS DÁ ____NOSSO 'DOMAIN' ATUAL______... (ou seja, o SITE atual....).





Isso quer dizer que vocÊ deve escrever 'location.domain' PARA OBTER O SITE EM QUE O USUÁRIO/VOCÊ ESTÁ NO PRESENTE/AGORA MESMO, representado no javascript... (aí vocÊ não precisa escrever o nome do site, fazer um hardcode, coisas desnecessárias).







No nosso caso, esse 

'location.origin' VAI NOS 

DAR NOSSO DOMAIN ATUAL, QUE É 


'http://localhost:8080';


ex:



sharedLinkInputElement.value  = `${location.origin}`;




-------------------------------------------------------




Certo... consertamos algumas coisas no nosso código, e agora ele compila normalmente 

(estava faltando "async" no success case DO 'getCurrentPosition()'...)







-----------------------------------------------------




Certo, temos esse valor de 'sharedLinkInputElement' como sendo `${location.origin}`;,




ESSE negócio deve ser utilizado PARA COLOCARMOS NOSSO ENDEREÇO LOGO APÓS ELE...



(pq a parte que vem depois DO DOMÍNIO É EFETIVAMENTE O ENDEREÇO QUE QUEREMOS...)



O professor explica que a estrutura 

de nosso url 


aqui 



será 


'${location.origin}/my-place'  



ELE EXPLICA QUE O 

'my-place' NÃO PODE SER """QUALQUER COISA"""", não, ELE 

DEVE SER __OBRIGATORIAMENTE___ o NOME DO NOSSO _SUB-FOLDER__ (aquele folder 
que temos no nosso sistema de arquivos)...

Nós devemos fazer com que seja aquele folder PRECISAMENTE 

PQ EXISTE UM 'index.html' DENTRO DAQUELE SUBFOLDER, O INDEX.HTML que 
será 

ACESSADO PELO BROWSER POR MEIO DESSA NOSSA URL dinâmica que estamos criando agora...






depois de 

'/my-place'



devemos inserir aquilo 


que chama-se de "QUERY PARAMETER"...



um """"query parameter""" É CRIADO 

POR MEIO DE um "?" (uma question mark)........



um query parameter 

É BASICAMENTE UMA "EXTRA DATA" que podemos adicionar 

NA nossa URL...... um 

dado extra inserido na URL QUE PODERÁ SER, ENTÃO, MAIS TARDE, 
LIDO 

DESSA URL (inserido nessa url) POR MEIO DAQUELA OUTRA PÁGINA QUE 
ESTAREMOS CARREGANDO DEPOIS... (a página 'my-place', que tem aquele outro index.html...)



-------------------------------------------------------------------



NESSA URL, 

VOU QUERER DEFINIR 


uma 


key 

DE

'address'


como 

SENDO IGUAL ('=') 



A UM VALOR DINÂMICO...


representação (EX):



sharedLinkInputElement.value = `${location.origin}/my-place?address=${}`;


----------------------------------------------------




como sendo igual A BASICAMENTE O ENDEREÇO QUE ESTAREI RECEBENDO NESSE 'selectPlace'... (ou seja, 'address'...)....




SIM, É O 'address' QUE ESTAREI RECEBENDO EM 'selectPlace', MAS 

_______eNCODADO_____ ("encodeURI()") 

DE UM JEITO QUE ELE CONSIGA SER USADO/LIDO EM UMA URL....





ou seja,


devemos 

escrever 



'encodeURI(address);'

DENTRO DESSE INJECT DINÂMICO (${})




ex:







sharedLinkInputElement.value = `${location.origin}/my-place?address=${encodeURI(address)}`;


--------------------------------------------------------



Mas não acabamos por aí...




Depois disso devemos INSERIR UM 'AMPERSAND SYMBOL' (&) 

PARA ADICIONAR OUTRO, DESSA VEZ OPCIONAL, QUERY PARAMETER à NOSSA URL...



O professor diz que esse query parameter DEVERÁ SER 'lat'...,


e seu valor (dinâmico) deverá ser igual a 


'coordinates.lat'..........



DEPOIS DISSO, OUTRO AMPERSAND, DESSA VEZ PARA UM QUERY PARAMETER 

DE 'lng'...



ex:







sharedLinkInputElement.value = `${location.origin}/my-place?address=${encodeURI(address)}&lat=${coordinates.lat}&lng=${coordinates.lng}`;





--------------------------------------------------




COM ISSO, O PROFESSOR ACABOU ENCODANDO ___TODOS AQUELES DADOS DE LOCALIZAÇÃO ____ (ou seja, TANTO AS COORDENADAS, COMO O ENDEREÇO EM SI)
NESSA CONSTRUÇÃO DE URL por meio de um template literal....




COM ISSO, DEVEMOS SALVAR ESSA CONSTRUÇÃO E VÊ-LA EM AÇÃO...








REPRESENTAÇÃO (ex):






  selectPlace(coordinates, address) {
    if (this.map) {
      this.map.render(coordinates); 
    } else {
      this.map = new Map(coordinates);
    }
    this.shareBtn.disabled = false;
    const sharedLinkInputElement = document.getElementById('share-link');
    sharedLinkInputElement = `${location.origin}/my-place?address=${encodeURI(address)&lat=${coordinates.lat}&lng=${coordinates.lng}}`
  }



--------------------------------







o professor denota um erro no código:



estávamos usando 


'async' em 



'locateUserHandler'......



-----> devemos usar 'async' 

em 'successResult', e não em 


'locateUserHandler'..





---> professor diz que é bom que esse erro tenha acontecido agora, 


pois ele deixa bem claro QUE VOCÊ 


SEMPRE DEVE ADICIONAR 


'ASYNC' NA FUNÇÃO QUE DIRETAMENTE FAZ "WRAP" DA

FUNÇÃO EM QUE VOCÊ VAI COLOCAR 'await'... (ou seja,

a função que é diretamente linkada a ela/diretamente a usa...)



-------------------------





AGORA QUANDO CLICAMOS EM 'get current location', 

NÓS CONSEGUIMOS FAZER COM QUE 



O ENDEREÇO SEJA CONSTRUÍDO 

NAQUELE LUGAR NO CENTRO DA PÁGINA (em cima do botão 

'share place'...).


ex:


'http://localhost:8080/my-place?address=924%2094%20Sorsele,%20Sw...'




-------------------------------------




Entretanto, o botão 'share place' ainda não funciona;


queremos que esse botão COPIE O LINK NO CLIPBOARD...


--------------------------------------



