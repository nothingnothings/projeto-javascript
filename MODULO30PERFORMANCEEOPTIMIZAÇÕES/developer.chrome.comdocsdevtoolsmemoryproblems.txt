Learn how to use Chrome and DevTools to find memory issues that affect page performance, including memory leaks, memory bloat, and frequent garbage collections.

Summary 
Find out how much memory your page is currently using with the Chrome Task Manager.
Visualize memory usage over time with Timeline recordings.
Identify detached DOM trees (a common cause of memory leaks) with Heap Snapshots.
Find out when new memory is being allocated in your JS heap with Allocation Timeline recordings.



Press Shift+Esc or go to the Chrome main menu and select More tools 
> Task manager to open the Task Manager.



Right-click on the table header of the Task Manager and enable JavaScript memory.




Make a recording.
Tip: It's a good practice to start and end your recording with a forced garbage collection. Click the collect garbage button (force garbage collection button) while recording to force garbage collection.

To demonstrate Timeline memory recordings, consider the code below:




var x = [];

function grow() {
  for (var i = 0; i < 10000; i++) {
    document.body.appendChild(document.createElement('div'));
  }
  x.push(new Array(1000000).join('x'));
}

document.getElementById('grow').addEventListener('click', grow);









Every time that the button referenced in the code is pressed, ten thousand div nodes are appended to the document body, and a string of one million x characters is pushed onto the x array. Running this code produces a Timeline recording like the following screenshot:
















Now, an analysis of the code compared with the screenshot. If you look at the node counter (the green graph) you can see that it matches up cleanly with the code. The node count increases in discrete steps. You can presume that each increase in the node count is a call to grow(). The JS heap graph (the blue graph) is not as straightforward. In keeping with best practices, the first dip is actually a forced garbage collection (achieved by pressing the collect garbage button). As the recording progresses you can see that the JS heap size spikes. This is natural and expected: the JavaScript code is creating the DOM nodes on every button click and doing a lot of work when it creates the string of one million characters. The key thing here is the fact that the JS heap ends higher than it began (the "beginning" here being the point after the forced garbage collection). In the real world, if you saw this pattern of increasing JS heap size or node size, it would potentially mean a memory leak.




----------------------------




A DOM node can only be
 garbage collected when there are no references to it from either the page's
  DOM tree or JavaScript code. A node is said to be "detached" 
  when it's removed from the DOM tree but some JavaScript still references it. 
  Detached DOM nodes are a common cause of memory leaks. This section teaches 
  you how to use DevTools' heap profilers to identify detached nodes.



Here's a simple example of detached DOM nodes.




var detachedTree;

function create() {
  var ul = document.createElement('ul');
  for (var i = 0; i < 10; i++) {
    var li = document.createElement('li');
    ul.appendChild(li);
  }
  detachedTree = ul;
}

document.getElementById('create').addEventListener('click', create);





Clicking the button referenced in the code creates a ul node with ten li children. These nodes are referenced by the code but do not exist in the DOM tree, so they're detached.

Heap snapshots are one way to identify detached nodes. As the name implies, heap snapshots show you how memory is distributed among your page's JS objects and DOM nodes at the point of time of the snapshot.

To create a snapshot, open DevTools and go to the Profiles panel, select the Take Heap Snapshot radio button, and then press the Take Snapshot button.



The snapshot may take some time to process and load. Once it's finished, select it from the lefthand panel (named HEAP SNAPSHOTS).




Type Detached in the Class filter textbox to search for detached DOM trees.




Expand the carats to investigate a detached tree.





Nodes highlighted yellow have DIRECT references
 to them from the JavaScript code. Nodes highlighted
  red do not have direct references.
   They are only alive BECAUSE they are part of the yellow node's tree. 
   In general, you want to focus on the YELLOW nodes (icon of a small window). 
   Fix your code so that the yellow node isn't alive for longer than it needs to be,
    and you also get rid of the red nodes that are part of the yellow node's tree.




8

Following this proposal, the color coding was replaced by icons with tooltips:

JS object that is reachable from window
Was: yellow highlight
Now: icon of a small window

DOM object that is detached from the tree
Was: red highlight
Now: icon with a pair of scissors




(nesse exemplo do professor, é o 'HTMLUListElement' O LUGAR DO CÓDIGO EM QUE HÁ O MEMORY LEAK... Se resolvemos 
o problema dele, todos os  'HTMLLIElements' também terão seu problema solucionado.)







Identify JS heap memory leaks with Allocation Timelines #


The Allocation Timeline is another tool that can help you track down memory leaks in your JS heap.

To demonstrate the Allocation Timeline consider the following code:






To demonstrate the Allocation Timeline consider the following code:


/*
var x = [];

function grow() {
  x.push(new Array(1000000).join('x'));
}

document.getElementById('grow').addEventListener('click', grow);
*/




Every time that the button referenced in the code is pushed, a string of one million characters is added to the x array.

To record an Allocation Timeline, open DevTools, go to the Profiles panel, select the Record Allocation Timeline radio button, press the Start button, perform the action that you suspect is causing the memory leak, and then press the stop recording button (stop recording button) when you're done.

As you're recording, notice if any blue bars show up on the Allocation Timeline, like in the screenshot below.






Those blue bars represent new memory allocations. 
Those new memory allocations are your candidates for memory leaks. 
You can zoom on a bar to filter the Constructor pane to only show objects
 that were allocated during the specified timeframe.




Expand the object and click on its value to view more details about it in the Object pane.
 For example, in the screenshot below, by viewing the details of the object 
 that was newly allocated, you'd be able to see that it was allocated to the 
 x variable in the Window scope.




-----------------------------------------



Investigate memory allocation by function #



Use the Record Allocation Profiler type to view memory allocation by JavaScript function.



Select the Record Allocation Profiler radio button. If there is a worker on the page, you can select that as the profiling target using the dropdown menu next to the Start button.
Press the Start button.
Perform the actions on the page which you want to investigate.
Press the Stop button when you have finished all of your actions.


DevTools shows you a breakdown of memory allocation by function. The default view is Heavy (Bottom Up), which displays the functions that allocated the most memory at the top.

(o mais 'heavy' aqui é o 'grow' da função 'join'..., nesse exemplo.)



----------------------------------------





Spot frequent garbage collections ---->



If your page appears to pause frequently, then you may have garbage collection issues.

You can use either the Chrome Task Manager 
or Timeline memory recordings to spot frequent garbage collections.
 In the Task Manager, frequently rising and falling Memory or JavaScript Memory
  values represent frequent garbage collections. In Timeline recordings, 
  frequently rising and falling JS heap or node count graphs indicate
   frequent garbage collections.

Once you've identified the problem, you can use an Allocation Timeline 
recording to find out where memory is being allocated and which functions are
 causing the allocations.

