








---> O ÚLTIMO FURO DE SEGURANÇA QUE VOCÊ DEVE TER EM MENTE 

É O 




DE 




_____CORS___...





----------------------------------------------




O professor já falou sobre isso antes... 





Não é bem um ATTACK PATTERN, e sim um 


___CONCEITO DE SEGURANÇA ___ ('security concept')....





A IDEIA AQUI É QUE 


REQUESTS feitos de sua browserside application 

SOMENTE PODEM 

SER FEITOS A UMA BACKEND QUE 


______rODA NO MESMO SERVIDOR ____ DA FRONTEND/browserside code...





----> O HTML E O SCRIPT QUE FOI SERVIDO NESSE HTML DEVEM TER SIDO SERVIDOS DO __MESMO SERVIDOR_...
    O LOCAL PARA ONDE VOCÊ ENVIA OS REQUESTS, O BACKEND, DEVE ESTAR RODANDO NO MESMO SERVIDOR 
    EM QUE O HTML ESTÁ SENDO HOSTEADO...





-----> é assim que browsers funcionam, por default... é isso que eles permitem, por default.



('Requests are only allowed from same origin (domain)' )








-----------> MAS EM WEBAPPs modernos, você FREQUENTEMENTE 

PRECISA MANDAR REQUESTS A ___OUTROS SERVIDORES____, no entanto....





EM OUTRAS PALAVRAS: frequentemente temos que enviar requests a servidores QUE 

NÃO SERVIRAM O HTML e código javascript browserside... servidores que 


APENAS PROVIDENCIARAM ___aLGUNS 'API ENDPOINTS', 


ALGUMAS 'URLs' às quais vocÊ pode enviar dados, armazenar dados, ler (fazer fetch) de dados...




ISSO É ALGO QUE VIMOS NO MÓDULO SOBRE 'node.js'....




------------------------------------------------




AÍ, VOCê PODE CONTROLAR O 'CORS'/REQUESTS por meio 

dos 



SERVERSIDE HEADERS...




SÃO OS SERVERSIDE HEADERS QUE CONTROLAM/QUE DITAM SE 


UM DETERMINADO REQUEST É ___PERMITIDO___ (com uma response VÁLIDA 
sendo enviada em contrapartida)  

OU NÃO... 





-------> portanto, esse é um conceito pelo qual 

BROWSERS, POR DEFAULT,



NÃO PERMITEM QUE VOCÊ ALCANCE ALGUM 

OUTRO SERVIDOR....




__eNTRETANTO___, com OS SERVERSIDE HEADERS ___CORRETOS/ADEQUADOS__, 


VOCê PODE fazer 'override' nesse comportamento default de RECUSA....







É UM CONCEITO, PORTANTO, QUE NO FINAL DAS CONTAS DEVE 'secure' servers... ele faz 
com que NEM 

TODAS AS PESSOAS CONSIGAM ACESSAR OS RECURSOS DE UMA PÁGINA...
NEM TODAS AS PÁGINAS/USUÁRIOS/SERVIDORES 

PODEM ACESSAR OS RECURSOS 

De outros servidores (at least).....




MAS COM OS HEADERS CORRETOS/ADEQUADOS DEFINIDOS NO SERVERSIDE, 


Você pode PERMITIR ESSE 'CROSS ORIGIN RESOURCE SHARING'...




UM EXEMPLO PERFEITO DISSO É 


___OS JAVASCRIPT MODULES___....






----> esse conceito (concept) 'BUILTIN' do javascript 

TAMBÉM __PRECISAVA DE UM 'DEV-SERVER', como vocÊ pode se lembrar...




E ELE REQUERIA UM DEV SERVER PQ 


_______JAVASCRIPT MODULES____, ou seja, 

ARQUIVOS JAVASCRIPT IMPORTADOS EM OUTROS ARQUIVOS JAVASCRIPT, 



SÓ SÃO PERMITIDOS NESSES OUTROS ARQUIVOS ___SE ESSES ARQUIVOS FOREM ____ 

DO MESMO SERVIDOR....




Ou seja, a mim só é permitido importar outro arquivo javascript 

QUE ESTEJA NO __MESMO SERVIDOR__/que seja servido pelo mesmo servidor...







--> E NÃO HÁ NENHUMA MANEIRA DE MUDAR ESSE COMPORTAMENTO, POIS 

ESSE É UM MECANISMO DE SEGURANÇA 'BUILTIN' nos browsers.... (criado especificamente para 

essa feature javascript...).


-----------------------------------------------------------





OUTRO EXEMPLO DISSO É O APLICATIVO NODE.JS EM QUE TRABALHAMOS....



Lá nós temos as diferentes ROUTES em que nós 'handle' no 

backend....



Como a rota 




de 


'/add-location', de método POST....





E O REQUEST QUE É ENVIADO A ESSA ROTA NÃO É UM 


REQUEST 



ENVIADO DE ALGUMA PÁGINA 


_______QUE É 'served' PELO MESMO SERVIDOR.... (pelo mesmo SERVER desse backend...),



NÃO, 



ESSE REQUEST É ENVIADO POR ALGO COM IP/URL diferente (como 'localhost:8080' e 'localhost:3000')...





É ENVIADO POR UMA PÁGINA QUE RODA EM UM __dOMÍNIO DIFERENTE, EM UM __SERVIDOR___ DIFERENTE....



E AINDA ASSIM, ESSE CÓDIGO DA ROUTE FUNCIONA...

Mas pq?




FUNCIONA 


PQ O PROFESSOR 



SETTOU os CORRETOS HEADERS 'CORS' NO 



OBJETO 


____'RESPONSE'___ DEFINIDO 



NO ARQUIVO 'app.js', no ARQUIVO DO BACKEND/NO BACKEND...



ex:






app.use((req, resp, next) => {
    resp.setHeader('Access-Control-Allow-Origin', '*');
    resp.setHeader('Access-Control-Allow-Method', 'POST, GET, OPTIONS');  //////o método de tipo 'OPTIONS' sempre é necessário quando queremos USAR O BROWSERSIDE PARA __ENVIAR ____ REQUESTS DE TIPO 'POST'... (ou, vice-versa, quando queremos RECEBER REQUESTS DE TIPO 'POST' de nosso browser/client/usuário)...
    resp.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    next();

})





---------------------------------------------


ESSES 'CORS HEADERS' DA __RESPONSE__ produzida/enviada pelo servidor DIZEM AO BROWSER 



'''''OK, isso é ok... ESSA PÁGINA QUE MANDA ESSE REQUEST DE TIPO 'POST', 'GET' E 'OPTIONS'
DEVE CONSEGUIR/'IS ALLOWED' TO GET THE DATA...''''''' ------------>


---------> E É ESSA 'MENSAGEM DO SERVIDOR' QUE FAZ COM QUE O BROWSER NÃO SEJA UM CHATONILDO
 E AUTOMATICAMENTE ____'''TRAVE''''____ TUDO... É isso que fará com que o browser não produza 

 aquela mensagem de erro do CORS e é isso que fará com que O ___REQUEST DO USUÁRIO___ QUE FOI 
 FEITO EM UM DOMÍNIO/IP DIFERENTE (como a FRONTEND do webapp... isso é visto no send de requests 
 PELA FRONTEND em direção À BACKEND de um webapp) SEJA 

 ENVIADO COM SUCESSO À BACKEND de UM WEBAPP, AINDA QUE ESSA BACKEND ESTEJA EM UM DOMÍNIO DIFERENTE (o que geralmente, 99% das vezes, acontece)....


 -----------------------------


 ESSES HEADERS DA RESPONSE É QUE MUDARÃO O COMPORTAMENTO DO BROWSER, EVITARÃO QUE 

 ELE 'BLOQUEIE' a REQUEST produzida pelo browser....







 ----> isso significa que o CORS do seu backend é um MECANISMO DE SEGURANÇA QUE 


 VOCê PODE ___USAR____ ou DESABILITAR___ ou ____CONFIGURAR ___ para 

 satisfazer suas necessidades... (com base nos seus requirements...)




 E ESSA É A IDEIA POR TRÁS DO 'CORS', desse 


 conceito de 


 cross origin resource sharing...