












então precisamos chamar 


'addProject()' de dentro da 


PROJECTLIST, mas a parte complicada aqui é QUE NÓS TEMOS 


DE CHAMAR ESSE MÉTODO EM 


OUTRA INSTÂNCIA DE PROJECTLIST; não pode ser de dentro da classe...




Não podemos, portanto, chamar o método assim:






ex:





class ProjectList {




    switchProject(projectId) {
        this.addProject(); ////////////NÃO PODERÍAMOS FAZER ISSO.

    }
}


--------------------------------



NÃO PODEMOS FAZER ISSO PORQUE ISSO FARIA COM QUE 

O MÉTODO FOSSE CHAMADO NA MESMA INSTÂNCIA... (ou seja, o 'addProject' faria COM QUE O PROJECTITEM FOSSE ___readicionado__ à lista de onde foi tirado.)



------------------------------------------




BEM, E O QUE PODEMOS FAZER PARA ACABAR COM ESSE PROBLEMA?



Podemos utilizar um approach que 

AINDA NÃO UTILIZAMOS, mas que aprendemos sobre, 


que é o uso de 


UMA CALLBACK FUNCTION...



---------------------------------




O professor começa:



por exemplo, poderíamos fazer com que o constructor de 

'ProjectList' ESPERE UM SEGUNDO ARGUMENTO (e não somente 'type'), 

um argumento 


'switchHandlerFunction'.....




ELE ESPERARÁ ESSA FUNÇÃO nesse slot....




Aí o professor diz que podemos 


armazenar 
essa 'switchHandlerFunction' em 


UMA PROPRIEDADE DENTRO DE projectList...



ele faz isso com o uso de 'this'...






PROFESSOR TAMBÉM DIZ QUE VAI QUERER ARMAZENAR o 'type', passado como parâmetro 

ao constructor de projectList, EM UMA PROPRIEDADE.








ex:











class ProjectList {


    projects = [];
    
    constructor(type, switchHandlerFunction) {

        this.type = type;
        this.switchHandler = switchHandlerFunction;


        const projectItems = document.querySelectorAll(`#${type}-projects li`);
        for (const prjItem of projectItems) {
            this.projects.push(new ProjectItem(prjItem.id));
        }
        //console.log(projectItems);
        console.log(this.projects);
    }



    addProject() {

    }           


    switchProject(projectId) {
    const projectIndex = this.projects.findIndex(p => p.id === projectId);
    this.projects.splice(projectIndex, 1);
    }
}




------------------------------




Com a 


'switchHandlerFunction' ARMAZENADA NA PROPRIEDADE 

'switchHandler', explica o professor, isso deverá /será


SER, NA VERDADE, um pointer/endereço/indicador A UMA FUNÇÃO 

QUE PODEREMOS CHAMAR 



COM 


                    (OBS: 'switchHandler' é a PROPERTY NAME...)


'this.switchHandler()', 





que poderá ser chamado 

EM 

'switchProject(projectId)'....


-----------------------------




ex:






class ProjectList {


    projects = [];
    
    constructor(type, switchHandlerFunction) {

        this.type = type;
        this.switchHandler = switchHandlerFunction;


        const projectItems = document.querySelectorAll(`#${type}-projects li`);
        for (const prjItem of projectItems) {
            this.projects.push(new ProjectItem(prjItem.id));
        }
        //console.log(projectItems);
        console.log(this.projects);
    }



    addProject() {

    }           


    switchProject(projectId) {


        this.switchHandler();
    const projectIndex = this.projects.filter(p => p.id !== projectId);
   
    }
}


---------------------------------------




AÍ, o professor diz que poderíamos, por exemplo, 

PASSAR 

O PROJETO QUE QUEREMOS 

TROCAR/passar COMO PARÂMETRO DESSE 


'switchHandler'...


Faremos isso com a ajuda do método 'find()', que será executado em 'this.projects'...



Com 'find()' podemos encontrar/ganhar acesso 
A UM OBJETO que 

satisfaça o critério do parâmetro...

o critério SERÁ UMA ANONYMOUS function....


uma anonymous function de 

'p => p.id === projectId)'






ex



this.switchHandler(this.projects.find(p => p.id === projectId));



-------------------------------------------------------------





COM ISSO, CONSEGUIMOS PASSAR O NOSSO PROJETO ao switchHandler....




Mas a pergunta agora é: 


O QUE É ESSA 'SWITCHHANDLERFUNCTION'...?




DE ONDE ISSO ESTÁ VINDO?


Estamos recebendo essa função NO CONSTRUCTOR de projectList, 

MAS ATÉ AGORA, lá embaixo 

em 

'const activeProjectsList = new ProjectList('active')'  NÓS NÃO ESTAMOS 

PASSANDO NADA QUE CORRESPONDA à ESSA SUPOSTA FUNÇÃO... 




......BEM, É EXATAMENTE ISSO QUE TEMOS DE FAZER AGORA...



TEMOS QUE DEFINIR UMA FUNÇÃO NESSE LOCAL...


temos de passar alguma coisa como segundo parâmetro dessa instanciação de projectList.... esse segundo parâmetro é 

aquilo que será passado como segundo argumento ao constructor de ProjectList....



MAS A COISA QUE EU VOU QUERER PASSAR É ALGO DIFÍCIL DE ESCREVER....


eu quero passar UMA FUNÇÃO QUE SEJA PARTE DA OUTRA INSTÂNCIA (da instância 'active')....



E POR ISSO NÓS, NA VERDADE, NÃO PODEMOS USAR O CONSTRUCTOR, PORQUE NÓS PRECISAMOS QUE AS DUAS INSTÂNCIAS 
TENHAM TERMINADO SUAS EXECUÇÕES PARA QUE CONSIGAMOS ALCANÇAR AS DUAS....




É por isso que nós vamos até o constructor de ProjectList e alteramos um pouco o código:


removemos o segundo argumento, 'switchHandlerFunction', e a linha 


de código 'this.switchHandler = switchHandlerFunction;'....



Entretanto, deixamos 'this.type = type', pois isso ainda será útil...





ex:





class ProjectList {


    projects = [];
    
    constructor(type) {

        this.type = type;
        


        const projectItems = document.querySelectorAll(`#${type}-projects li`);
        for (const prjItem of projectItems) {
            this.projects.push(new ProjectItem(prjItem.id));
        }
        //console.log(projectItems);
        console.log(this.projects);
    }



    addProject() {

    }           


    switchProject(projectId) {


        this.switchHandler();
    const projectIndex = this.projects.filter(p => p.id !== projectId);
   
    }
}




-----------------------------




Aí adicionamos um NOVO MÉTODO em 'ProjectList', chamado de 


'setSwitchHandlerFunction'....


dentro de seu body, colocamos aquela 

linha de código 


'this.switchHandler = switchHandlerFunction'...



COLOCAMOS A LÓGICA CORTADA, PORTANTO....


além disso, também fazemos com que setSwitchHandlerFunction aceite um 

parâmetro de 'switchHandlerFunction'...


ex:









class ProjectList {


    projects = [];
    
    constructor(type) {

        this.type = type;
        


        const projectItems = document.querySelectorAll(`#${type}-projects li`);
        for (const prjItem of projectItems) {
            this.projects.push(new ProjectItem(prjItem.id));
        }
        //console.log(projectItems);
        console.log(this.projects);
    }

    setSwitchHandlerFunction(switchHandlerFunction) {
        this.switchHandler = switchHandlerFunction;
    }

    addProject() {

    }           


    switchProject(projectId) {


        this.switchHandler();
    const projectIndex = this.projects.filter(p => p.id !== projectId);
   
    }
}



----------------------------------



FEITO ISSO, AGORA PODEMOS CHAMAR o método 'setSwitchHandlerFunction()' NAS NOSSAS INSTÂNCIAS....



ou seja, podemos chamá-lo EM APP....



Dentro de app, 


podemos 

colocar 


chamá-lo na const ACTIVEPROJECTSLIST.... (que é a primeira instância da classe 'ProjectList'...):





ex:






class ProjectList {


    projects = [];
    
    constructor(type) {

        this.type = type;
        


        const projectItems = document.querySelectorAll(`#${type}-projects li`);
        for (const prjItem of projectItems) {
            this.projects.push(new ProjectItem(prjItem.id));
        }
        //console.log(projectItems);
        console.log(this.projects);
    }

    setSwitchHandlerFunction(switchHandlerFunction) {
        this.switchHandler = switchHandlerFunction;
    }

    addProject() {

    }           


    switchProject(projectId) {


        this.switchHandler();
    const projectIndex = this.projects.filter(p => p.id !== projectId);
   
    }
}




class App {
    static init() {
        const activeProjectsList = new ProjectList('active');
        const finishedProjectsList = new ProjectList('finished');
        activeProjectsList.setSwitchHandlerFunction(); /////EIS AQUI O CÓDIGO.
    }
}



---------------------------------------------




CHAMAMOS, PORTANTO, 'setSwitchHandlerFunction' em ACTIVEPROJECTSLIST....


no slot do parâmetro desse method call, DEVEMOS DEFINIR QUAL FUNÇÃO 

DEVERÁ SER CHAMADA  quando nós, no final das contas, chamarmos a propriedade 

'this.switchHandler' (definida dentro da setSwitchHandlerFunction....),   como nós fazemos, por exemplo,  dentro do body de 'switchProject()'... ('this.switchHandler(this.projects.find(p => p.id === projectId)); )....




E A PROPRIEDADE QUE DEVERÁ SER CHAMADA NA 

OUTRA INSTÂNCIA SERÁ


'addProject()'........



deverá ser 'addProject' porque é ele que nos garantirá a lógica PARA 

RECEBER UM PROJETO E ENTÃO ADICIONÁ-LO naquela instÂncia 

de projectList....




Portanto, em 


'activeProjectsList.setSwitchHandlerFunction();', dentro do método 

ESTÁTICO 'init()' dentro da classe APP, DEVEMOS APONTAR (no parâmetro) 

À finishedProjectsList.....



ex:




'activeProjectsList.setSwitchHandlerFunction(finishedProjectsList);'










----------------------------




Ex:





class ProjectList {


    projects = [];
    
    constructor(type) {

        this.type = type;
        


        const projectItems = document.querySelectorAll(`#${type}-projects li`);
        for (const prjItem of projectItems) {
            this.projects.push(new ProjectItem(prjItem.id));
        }
        //console.log(projectItems);
        console.log(this.projects);
    }

    setSwitchHandlerFunction(switchHandlerFunction) {
        this.switchHandler = switchHandlerFunction;
    }

    addProject() {

    }           


    switchProject(projectId) {


        this.switchHandler(this.projects.find(p => p.id === projectId));
    this.projects = this.projects.filter(p => p.id !== projectId);
   
    }
}




class App {
    static init() {
        const activeProjectsList = new ProjectList('active');
        const finishedProjectsList = new ProjectList('finished');
        activeProjectsList.setSwitchHandlerFunction(finishedProjectsList);
    }
}






--------------------------------




Mas nós não fazemos uma simples referência À 'finishedProjectsList' aqui, não;

nós fazemos uma referência AO MÉTODO INSERIDO NESSE PROJECTLIST, o método 

'addProject', responsável pelo recebimento E ADIÇÃO DO 'projectItem' À outra lista...









ex:







class Tooltip {

}





class ProjectItem {

    constructor(id) {
        this.id = id;
        this.connectMoreInfoButton();
        this.connectSwitchButton();
    }


    connectMoreInfoButton() {

    }


    connectSwitchButton() {
        const projectItemElement = document.getElementById(this.id);
        const switchBtn = projectItemElement.querySelector('button:last-of-type');
        
    }
}





class ProjectList {


    projects = [];
    
    constructor(type) {




        this.type = type;
        const projectItems = document.querySelectorAll(`#${type}-projects li`);
        for (const prjItem of projectItems) {
            this.projects.push(new ProjectItem(prjItem.id));
        }
        
        console.log(this.projects);
    }



    setSwitchHandlerFunction(switchHandlerFunction) {
        this.switchHandler = switchHandlerFunction;
    }


    addProject() {

    }           


    switchProject(projectId) {
   
    this.switchHandler(this.projects.find(p => p.id === projectId));  
    this.projects = this.projects.filter(p => p.id !== projectId);
   
    }
}





class App {
   static init() {
        const activeProjectsList = new ProjectList('active');
        const finishedProjectsList = new ProjectList('finished');
        activeProjectsList.setSwitchHandlerFunction(finishedProjectsList.addProject); 
    }
}




App.init();







---------------------------------------------





Ou seja, essa função 'addProject' é executada AQUI SEM O USO DE PARÊNTESES....

apenas apontamos para o local onde ele está (finishedProjectsList.addProject), isso 

já basta para que essa função seja executada em nosso nome.... (mesmo princípio dos 'eventListeners', portanto.)...

A simples indicação do local da função aqui GARANTE 


QUE ELA SEJA EXECUTADA 


em 


'this.switchHandler(this.projects.find(p => p.id === projectId));'




----------------------------------





UMA COISA IMPORTANTE QUE TEREMOS DE FAZER NESSA LINHA 'this.switchHandler(this.projects.find(p => p.id === projectId));' 



É FAZER O bind() DE 'THIS' dentro daquela função receptora de argumentos (a função 'addProject'...)....


faremos o bind de 'this' AO 'finishedProjectsList'...



(faremos isso porque COMO NÓS EFETIVAMENTE ESTAREMOS CHAMANDO 


'addProject' por meio da linha 'this.switchHandler',  'THIS' dentro do addProject

NORMALMENTE IRIA SE REFERIR A MESMA COISA a que 'this' se refere na linha 


'this.switchHandler', E ESSA REFERÊNCIA SERIA FEITA À INSTÂNCIA errada.... seria 

a instância errada porque estamos chamando 'addProject' na outra instância...

é por isso que temos de fazer o bind de 'this' em addPROJECT à instância em que 
queremos executar o 'addProject', que é em finishedProjectsList, 

e não DE ONDE NÓS ESTAREMOS O CHAMANDO (que é 'active-projects'/a projectList de 
projetos ativos..., onde está definido.) )



--------------------------------------




ex:






class Tooltip {

}





class ProjectItem {

    constructor(id) {
        this.id = id;
        this.connectMoreInfoButton();
        this.connectSwitchButton();
    }


    connectMoreInfoButton() {

    }


    connectSwitchButton() {
        const projectItemElement = document.getElementById(this.id);
        const switchBtn = projectItemElement.querySelector('button:last-of-type');
        
    }
}





class ProjectList {


    projects = [];
    
    constructor(type) {




        this.type = type;
        const projectItems = document.querySelectorAll(`#${type}-projects li`);
        for (const prjItem of projectItems) {
            this.projects.push(new ProjectItem(prjItem.id));
        }
        
        console.log(this.projects);
    }



    setSwitchHandlerFunction(switchHandlerFunction) {
        this.switchHandler = switchHandlerFunction;
    }


    addProject() {

    }           


    switchProject(projectId) {
   
    this.switchHandler(this.projects.find(p => p.id === projectId));  
    this.projects = this.projects.filter(p => p.id !== projectId);
   
    }
}





class App {
   static init() {
        const activeProjectsList = new ProjectList('active');
        const finishedProjectsList = new ProjectList('finished');
        activeProjectsList.setSwitchHandlerFunction(finishedProjectsList.addProject.bind(
            finishedProjectsList)
            ); 
    }
}




App.init();




------------------------------






Agora devemos fazer um PARALELISMO NO CÓDIGO... copiamos 

o código do ' activeProjectsList.setSwitchHandlerFunction(finishedProjectsList.addProject.bind(
            finishedProjectsList)
            ); ' 



E INVERTEMOS O CÓDIGO...




Trocamos as ProjectList de lugar:



ex:






class App {
   static init() {
        const activeProjectsList = new ProjectList('active');
        const finishedProjectsList = new ProjectList('finished');
        activeProjectsList.setSwitchHandlerFunction(finishedProjectsList.addProject.bind(
            finishedProjectsList)
            ); 
            finishedProjectsList.setSwitchHandlerFunction(activeProjectsList.addProject.bind(
            activeProjectsList)
            ); 
    }
}




--------------------------




Professor diz 'para que voce entenda o que eu estou fazendo aqui, vou no addProject 

e adiciono um pedaço de lógica que completará o conjunto...'.





O professor adiciona um console.log em 'addProject' PARA NOS 

MOSTRAR EM QUE MOMENTO ESSE MÉTODO É EXECUTADO....




ex:




addProject() {
    console.log(this);
}



-------------------------


Para ver algo com esse console.log, no entanto, devemos fazer uma coisa final no 

nosso projeto....


'switchProject', o método,  É ALGO QUE AGORA DEVEMOS CONECTAR AO NOSSO 

addEventListener no switchBtn.......


esse switchBtn é forwardeado em 'ProjectItem', por meio do método 

'connectSwitchButton', que envolve esse switchBtn...



Bem, para sermos capazes de CHAMAR UM MÉTODO de PROJECTLIST no lado 

de dentro de projectItem, também devemos nos certificar QUE CONSIGAMOS 

ENFIAR ESSE MÉTODO DENTRO DE 'projectItem'...


Para fazer isso, podemos UTILIZAR UM CONSTRUCTOR... o constructor de PROJECTITEM mesmo...



 Podemos colocar um novo argumento nesse ProjectItem, chamado 

 de 

 'updateProjectLists'......



 O professor também vai lá e armazena esse parâmetro em uma PROPRIEDADE, 


 chamada de 'updateProjectLists', por meio de 'this.updateProjectLists'...




Professor na verdade chama esse parâmetro de 'updateProjectListsFunction', PARA 

QUE FIQUE BEM CLARO A NÓS (e a quem ler o código) QUE ESSE PARÂMETRO 
SERÁ UMA FUNÇÃO/REFERÊNCIA A UMA FUNÇÃO/OBJETO-FUNÇÃO.



Ele também muda o nome da propriedade que 

segurará o valor dessa função para 'updateProjectListsHandler', para 

ser consistente com nosso padrão de nomenclatura.

 ex:











 class Tooltip {

}





class ProjectItem {

    constructor(id, updateProjectListsFunction) {
        this.id = id;
        this.updateProjectLists = updateProjectListsFunction;
        this.connectMoreInfoButton();
        this.connectSwitchButton();
    }


    connectMoreInfoButton() {

    }


    connectSwitchButton() {
        const projectItemElement = document.getElementById(this.id);
        const switchBtn = projectItemElement.querySelector('button:last-of-type');
        //switchBtn.addEventListener('click', );
    }
}





class ProjectList {


    projects = [];
    
    constructor(type) {




        this.type = type;
        const projectItems = document.querySelectorAll(`#${type}-projects li`);
        for (const prjItem of projectItems) {
            this.projects.push(new ProjectItem(prjItem.id));
        }
        //console.log(projectItems);
        console.log(this.projects);
    }



    setSwitchHandlerFunction(switchHandlerFunction) {
        this.switchHandler = switchHandlerFunction;
    }


    addProject() {

    }           


    switchProject(projectId) {
    //const projectIndex = this.projects.findIndex(p => p.id === projectId);
    this.switchHandler(this.projects.find(p => p.id === projectId));   ///EXEMPLO DE CALLBACK FUNCTION.
    this.projects = this.projects.filter(p => p.id !== projectId);
    //this.projects.splice(projectIndex, 1);
    }
}





class App {
   static init() {
        const activeProjectsList = new ProjectList('active');
        const finishedProjectsList = new ProjectList('finished');
        activeProjectsList.setSwitchHandlerFunction(
            finishedProjectsList.addProject.bind(finishedProjectsList)
        ); 
        finishedProjectsList.setSwitchHandlerFunction(activeProjectsList.addProject.bind(
            activeProjectsList)
            ); 
    }
}




App.init();






---------------------------





E AGORA, ESPERA-SE QUE ESSA PROPRIEDADE 

'updateProjectListsHandler' SEJA APONTADA A UMA FUNÇÃO...


Isso porque eu vou passar o segundo argumento ao 'ProjectItem'... 

BEM NO MOMENTO/LUGAR EM QUE EU CRIO UM NOVO PROJECTITEM 

__lá dentro dá projectList____ (naquele trecho 'for (const prjItem of prjItems) {
    this.projects.push(new ProjectItem(prjItem.id));'
})


E LÁ EU POSSO PASSAR 'this.switchProject' COMO SEGUNDO PARÂMETRO 

DEsse 'new ProjectItem' de dentro desse código....




IMPORTANTE!!!! ---> devemos, além disso, fazer o BIND() de 'this' dentro de 'switchProject' para 

que o this faça REFERÊNCIA EXATAMENTE À classe 'projectList', e não à 'ProjectItem' ou ao ' event source' (ao addEventListener)...




fazemos isso por meio do código 'this.switchProject.bind(this);'

----------------------------------------------






ex:









class Tooltip {

}





class ProjectItem {

    constructor(id, updateProjectListsFunction) {
        this.id = id;
        this.updateProjectLists = updateProjectListsFunction;
        this.connectMoreInfoButton();
        this.connectSwitchButton();
    }


    connectMoreInfoButton() {

    }


    connectSwitchButton() {
        const projectItemElement = document.getElementById(this.id);
        const switchBtn = projectItemElement.querySelector('button:last-of-type');
        switchBtn.addEventListener('click', );
    }
}





class ProjectList {


    projects = [];
    
    constructor(type) {




        this.type = type;
        const projectItems = document.querySelectorAll(`#${type}-projects li`);
        for (const prjItem of projectItems) {
            this.projects.push(new ProjectItem(prjItem.id, this.switchProject.bind(this))); //////EIS AQUI O CÓDIGO EM QUESTÃO.
        }
     
        console.log(this.projects);
    }



    setSwitchHandlerFunction(switchHandlerFunction) {
        this.switchHandler = switchHandlerFunction;
    }


    addProject() {

    }           


    switchProject(projectId) {
    
    this.switchHandler(this.projects.find(p => p.id === projectId));   
    this.projects = this.projects.filter(p => p.id !== projectId);
    
    }
}





class App {
   static init() {
        const activeProjectsList = new ProjectList('active');
        const finishedProjectsList = new ProjectList('finished');
        activeProjectsList.setSwitchHandlerFunction(
            finishedProjectsList.addProject.bind(finishedProjectsList)
        ); 
        finishedProjectsList.setSwitchHandlerFunction(activeProjectsList.addProject.bind(
            activeProjectsList)
            ); 
    }
}




App.init();




-----------------------------------------------------





POR FIM, O PROFESSOR FAZ COM QUE O 

addEventListener de 

'switchBtn' (em 'connectSwitchButton') EXECUTE O 

'this.updateProjectListsHandler', que iniciará toda a sequência de processos (junto com 'App.init()'.)




ex:







class Tooltip {

}





class ProjectItem {

    constructor(id, updateProjectListsFunction) {
        this.id = id;
        this.updateProjectLists = updateProjectListsFunction;
        this.connectMoreInfoButton();
        this.connectSwitchButton();
    }


    connectMoreInfoButton() {

    }


    connectSwitchButton() {
        const projectItemElement = document.getElementById(this.id);
        const switchBtn = projectItemElement.querySelector('button:last-of-type');
        switchBtn.addEventListener('click', this.updateProjectListsHandlerHandler);
    }
}





class ProjectList {


    projects = [];
    
    constructor(type) {




        this.type = type;
        const projectItems = document.querySelectorAll(`#${type}-projects li`);
        for (const prjItem of projectItems) {
            this.projects.push(new ProjectItem(prjItem.id, this.switchProject.bind(this))); //////EIS AQUI O CÓDIGO EM QUESTÃO.
        }
     
        console.log(this.projects);
    }



    setSwitchHandlerFunction(switchHandlerFunction) {
        this.switchHandler = switchHandlerFunction;
    }


    addProject() {

    }           


    switchProject(projectId) {
    
    this.switchHandler(this.projects.find(p => p.id === projectId));   
    this.projects = this.projects.filter(p => p.id !== projectId);
    
    }
}





class App {
   static init() {
        const activeProjectsList = new ProjectList('active');
        const finishedProjectsList = new ProjectList('finished');
        activeProjectsList.setSwitchHandlerFunction(
            finishedProjectsList.addProject.bind(finishedProjectsList)
        ); 
        finishedProjectsList.setSwitchHandlerFunction(activeProjectsList.addProject.bind(
            activeProjectsList)
            ); 
    }
}




App.init();







---------------------------------------



O professor esclarece 


QUE SABE QUE TUDO ISSO PODE PARECER MUTIO CONFUSO.




É uma maneira de assegurar que nossas classes/instances consigam TRABALHAR 


em harmonia, umas com as outras.





Professor diz que nós podemos utilizar as debugging tools 

para examinar o caminho de informação de nosso 


aplicativo.





Agora, se nós salvarmos o código e apertarmos em 


'finish' de um dos projetos, 


VEREMOS O OBJETO 


'ProjectList' loggado no console...




ex:



'ProjectList {projects: Array(1), type: "finished", switchHandler: f}'





ESSE RESULTADO FOI PRODUZIDO 


PELO console.log no method body 


de 'addProject'.




O QUE PERCEBEMOS PELO CONSOLE.LOG disso é que 


'ADDPROJECT' ESTÁ SENDO CHAMADO NA lista 'finished', no bloco 

dos finished projects......


ele está sendo chamado na lista DE FINISHEDPROJECTS MESMO EU TENDO 

APERTADO UM BOTÃO QUE SE ENCONTRA NO BLOCO DOS 'activeProjects'..........


ISSO PROVA 


QUE A NOSSA LÓGICA FUNCIONA, pois agora nós queremos adicionar esse item 

na LISTA DE FINISHEDPROJECTS.....


e é por isso que addProject deve ser executado em 'finishedProjects', para que ele 

receba e adicione o item que foi removido da lista 'active'.


Portanto, isso está funcionando.







A PRÓXIMA ETAPA É ADICIONAR LÓGICA EM ADDPROJECT que realmente cumpra essa função,

que consiga adicionar o projeto removido de activeProjectsList nessa 

lista de finishedProjects.....


ALÉM DISSO, devemos adicionar a lógica que FARÁ O 'ELEMENTO DOM' (elemento visual) CORRESPONDER 

À ESSA MUDANÇA...