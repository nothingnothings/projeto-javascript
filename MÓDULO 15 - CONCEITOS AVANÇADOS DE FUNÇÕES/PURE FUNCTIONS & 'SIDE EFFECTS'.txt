




O QUE É ISSO?




BEM, uma 'pure function' é uma FUNÇÃO que, para um determinado input que lhe é dado, __________SEMPRE ____ PRODUZ____ PRODUZIRÁ____ O MESMO ___OUTPUT____....







Exemplo gráfico:




Input (Arguments) 

        |
        |
        V 

    Pure Function 
        |
        |
        V
    Output



--------------------------------------------



'SAME INPUT ALWAYS PRODUCES THE SAME OUTPUT'...




OU SEJA, OS MESMOS ARGUMENTOS, OS MESMOS VALORES para os argumentos que são dados, SEMPRE PRODUZEM/PRODUZIRÃO O MESMO 

OUTPUT POR MEIO DESSE TIPO DE FUNÇÃO...





E, ALÉM DISSO, ESSE TIPO DE FUNÇÃO NÃO TRIGGA/ATIVA ____NENHUM TIPO DE SIDE EFFECT_____, o que significa que 

ELE NÃO MUDA NADA ___FORA____ da FUNÇÃO 


('DOES NOT CHANGE SOMETHING 'outside' of the function....')  (Isso são chamados 'side effects', os efeitos que ocorrem FORA DE UMA DETERMINADA FUNÇÃO).




----------------------------------



DEVEMOS VER COMO ESSAS FUNÇÕES SÃO UTILIZADAS/FUNCIONAM NA PRÁTICA...





Temos um projeto básico, um 'index.html'....




DENTRO DO 'APP.JS', o professor vai querer CRIAR UMA PURE FUNCTION, UMA FUNÇÃO SEM SIDE EFFECTS...





O professor ressalta que podemos criar uma função COMO BEM QUISERMOS, com a 'function keyword', ou com 'arrow functions', 'function expression', 

ou com uma 'function expression com arrow function...'.




O PROFESSOR, AQUI, UTILIZARÁ A BOA E VELHA SINTAXE DE 'FUNCTION DECLARATION', a 'function' clássica.







Ele cria uma função 

chamada 



'add'...



ex:



function add()



----------------------------



ESSA FUNÇÃO ACEITARÁ 2 NÚMEROS, 'num1 e num2', como PARÂMETROS, E RETORNARÁ 

'num1 + num2' COMO VALOR....




ex:





function add(num1, num2) {
    return num1 + num2;
}



--------------------------



OU SEJA, É UMA FUNÇÃO SUPER BÁSICA QUE ADICIONA 2 NÚMEROS.





o professor então coloca um console.log DESSA FUNÇÃO..., com uma call (ou seja, com uma passagem de parâmetros) 
DE NÚMEROS 1 e 5....






ex:




function add(num1, num2) {
    return num1 + num2;
}


console.log(add(1,5));
console.log(add(12, 15));



------------------------


O CONSOLE IRÁ NOS RETORNAR 

'6'

e 


'27'


-------------------------


NÓS RECEBEMOS ESSES 2 RESULTADOS NUMÉRICOS, E NÃO IMPORTA QUANTAS VEZES EU 
RECARREGUE A PÁGINA, AQUI EU SEMPRE RECEBEREI OS MESMOS RESULTADOS....


(O que não nos deve surpreender, pois NÃO HÁ 'aleatoriedade' nessa função; 

NÃO HÁ NENHUM COMPORTAMENTO ESTRANHO )...



PARA OS MESMOS VALORES INPUTTADOS EU SEMPRE RECEBEREI OS MESMOS RESULTADOS... (6 e 27)....


PORTANTO, ESSA FUNÇÃO 'add' É UM PERFEITO EXEMPLO DE UMA 

'PURE FUNCTION' ---> ELA NÃO MUDA NADA NO LADO DE FORA DE SUA FUNÇÃO, E ELA SEMPRE __PRODUZ___ O MESMO RESULTADO PARA OS MESMOS INPUTS....




----------------------------------------



MAS E QUAL SERIA UM EXEMPLO PARA UMA ___IMPURE FUNCTION____?




Por exemplo, podemos criar uma função chamada 'addRandom()'....


Nessa função, nós sempre receberemos um parâmetro 'num1'...

NO FUNCTION BODY, SEMPRE RETORNAREMOS 
'num1 + Math.random();'





ex:


function addRandom(num1) {
    return num1 + Math.random();
}


console.log(addRandom(5));




---------------------------------


OU SEJA, AGORA SEMPRE RETORNAREMOS AQUELE PARÂMETRO + um número ALEATÓRIO.... (esse número aleatório SERÁ 1 NÚMERO ENTRE 0 E 1....).



SE NÓS ENTÃO CHAMARMOS 'addRandom' DENTRO DO CONSOLE.LOG COM UM VALOR DE 5, NÓS ENTÃO, É CLARO, 

VEREMOS QUE SE ESSE CÓDIGO RODAR, NÓS SEMPRE RECEBEMOS DIFERENTES VALORES ___PARA O MESMO INPUT____.



---------------------------------------------


É CLARO QUE O CÓDIGO SEMPRE MUDARÁ, NESSE ÚLTIMO EXEMPLO, afinal de contas, adicionamos UMA FUNÇÃO ALEATÓRIA....




MAS COMO NÓS ___NÃO CONSEGUIMOS _____ PREVER O OUTPUT PARA UM DETERMINADO INPUT, ESSA 

FUNÇÃO SERIA/É CONSIDERADA 

UMA 

___FUNÇÃO IMPURA____. (IMPURE FUNCTION).



--------------------------------




UMA FUNÇÃO TAMBÉM NÃO É CONSIDERADA 'PURA' SE 

ELA INTRODUZ



'SIDE EFFECTS' ao código...




'SIDE EFFECTS' É UM TERMO FANCY PARA DIZER QUE ESSA FUNÇÃO MUDA/MUDARÁ QUALQUER COISA 


NO LADO DE FORA DE SEU RESPECTIVO CÓDIGO....



---> professor diz que isso PODERIA/PODE SER UM HTTP REQUEST O QUAL ESTAMOS ENVIANDO, ou dados 

que você então armazena em uma database, MAS ISSO PODERIA SER TAMBÉM ALGO MAIS TRIVIAL, como 

por exemplo A MUDANÇA DE ALGUMA VARIÁVEL QUE FORA DEFINIDA NO LADO DE FORA DESSA FUNÇÃO...



Como esse exemplo:


-------------------------------------



Digamos que temos uma variável chamada de 'previousResult'...

ESSA VARIÁVEL TERÁ O VALOR DE '0'.



ex:





let previousResult = 0;




--------------------------------


AÍ, NÓS TERÍAMOS UMA FUNÇÃO CHAMADA DE 


'addMoreNumbers'... ESSA FUNÇÃO ACEITARIA 2 parâmetros, um 'num1' e um 'num2'....



O PROFESSOR AINDA SOMA ESSES 2 NÚMEROS NESSA FUNÇÃO, por meio de 

'num1 + num2 '.... ele armazena o valor da soma em uma constante, a constante 

SUM.


ex:





let previousResult = 0;


function addMoreNumbers(num1, num2) {
    const sum = num1 + num2;
}



---------------------------------




MAS AÍ, ELE COLOCA UMA DIFERENÇA NESSA FUNÇÃO: ELE DEFINE 

'previousResult' COMO SENDO IGUAL AO VALOR DE 'sum', LOGO ANTES DE 

RETORNAR O VALOR DE 'sum'....




ex:





let previousResult = 0;


function addMoreNumbers(num1, num2) {
    const sum = num1 + num2;
    previousResult = sum;
    return sum;
}



-----------------------------------------



ESSA FUNÇÃO 'addMoreNumbers', PORTANTO, AGORA NÃO SERIA MAIS PURA, PORQUE 

ELA INTRODUZIU UM SIDE EFFECT ------> O SIDE EFFECT NÃO É ISSO, NÃO É O FATO DE QUE CALCULAMOS A 'SUM' dentro da função addMoreNumbers, PORQUE ESSA INFORMAÇÃO/DADOS SÃO ARMAZENADOS NA CONSTANTE 'sum'... (que, por sua vez, faz parte da função)... ------> 'sum' não é aquilo que torna ESSA FUNÇÃO EM UMA FUNÇÃO IMPURA....



NÃO, O QUE GEROU UM SIDE EFFECT NO NOSSO CÓDIGO FOI A LINHA DE CÓDIGO 



'previousResult = sum;' ------------> ISSO ACABA MUDANDO/ALTERANDO UMA VARIÁVEL 
                                        QUE HAVIA SIDO DEFINIDA ___NO LADO DE FORA___ DESSA FUNÇÃO 'addMoreNumbers'...





PORTANTO, QUANDO VOCÊ CHAMA ESSA FUNÇÃO 'addMoreNumbers' simplesmente solta no código, TALVEZ 

VOCÊ NÃO CONSIGA PERCEBER, MAS ESSA FUNÇÃO ___ALTERA ALGO NO NOSSO CÓDIGO__, ALGO QUE É EXTERNO à ela... (que é a variável 'previousResult'...).




ESSA MUDANÇA EM NOSSO CÓDIGO EM RAZÃO DE ESSA FUNÇÃO 'addMoreNumbers' SE TORNA EVIDENTE 

SE CONSOLE.LOGGARMOS 


'addMoreNumbers'....   (além de )



ex:




let previousResult = 0;


function addMoreNumbers(num1, num2) {
    const sum = num1 + num2;
    previousResult = sum;
    return sum;
}

addMoreNumbers(1, 5); /////---------> ISSO NÃO DEIXA EXATAMENTE ÓBVIO QUE HOUVE UMA MUDANÇA (UM 'SIDE EFFECT') EM RAZÃO DAQUELA LINHA DE CÓDIGO DE 'previousResult = sum;'...

console.log(addMoreNumbers(1, 5)); /////////isso faz nós observarmos melhor essa mudança




---------------------------------




ESSA MUDANÇA, ESSES 'SIDE EFFECTS', ÀS VEZES SÃO ALGO QUE VOCÊ VAI QUERER __EVITAR__.


---------------------------------




O PROFESSOR LOGO EXPLICARÁ QUAIS SÃO AS 'REGRAS', OU SEJA, 

QUANDO VOCÊ DEVE USAR 

PURE FUNCTIONS e 

QUANDO É OK USAR OUTRAS FUNÇÕES......




MAS, POR ENQUANTO, VOCÊ DEVE TER ISSO EM MENTE: 


USAR FUNÇÕES COMO ESSA ÚLTIMA, ou seja, que possuem SIDE EFFECTS, traz

consigo certos riscos.




------------------------------------




OUTRO EXEMPLO PARA UMA FUNÇÃO COM SIDE EFFECT (impura) SERIA UMA FUNÇÃO QUE ALTERA UM OBJETO/ARRAY 

QUE VOCÊ PASSA à ELA....



Digamos que temos um 


array de 'hobbies'...



ex:



const hobbies = ['Sports', 'Cooking'];




------------------------------------------



AÍ TEREMOS UMA FUNÇÃO CHAMADA DE 'printHobbies'....


COLOCAREMOS COMO PARÂMETRO ESSA FUNÇÃO 'HOBBIES'...



E ENTÃO FAREMOS O CONSOLE.LOG Do array 'hobbies' DENTRO DO BODY DESSA FUNÇÃO...




ex:



const hobbies = ['Sports', 'Cooking'];



function printHobbies(h) {
    console.log(h);
}

------------------------------------------------



MAS TAMBÉM, POR QUALQUER QUE SEJA A RAZÃO, NÓS TAMBÉM FAZEMOS O 


PUSH() de UM NOVO HOBBY PARA DENTRO DESSE ARRAY 'HOBBIES...




ex:





const hobbies = ['Sports', 'Cooking'];



function printHobbies(h) {


    h.push('NEW HOBBY');
    console.log(h);
}



-------------------------------------





SE AGORA CHAMARMOS 'PRINTHOBBIES()' e passarmos como argumento a constante 'hobbies', 


ficará assim:





ex:






const hobbies = ['Sports', 'Cooking'];



function printHobbies(h) {


    h.push('NEW HOBBY');
    console.log(h);
}


printHobbies(hobbies);




-------------------------------------------------



SE FIZERMOS ISSO, VEREMOS QUE O QUE ACABA SENDO PRINTADO, NA VERDADE, É O 

ARRAY DE HOBBIES COM O NOVO HOBBY de 'NEW HOBBY' incluído....



O output no console ficará 



'Array(3) 

0: 'SPORTS' 
1: 'Cooking' 
2: 'New hobby'
length: 3
__proto__: Array(0)'



-------------------------------------



A RAZÃO PARA ISSO, É CLARO, É QUE NÓS __MUDAMOS__ AQUELE ARRAY com o push 

de 'new Hobby'...





ENTRETANTO, COMO ARRAYS SÃO OBJETOS, e objetos são __REFERENCE VALUES__, quando MUDAMOS 

AQUELE ARRAY ALI, por meio da adição de 'new HObby', NÓS ACABAMOS MUDANDO/ALTERANDO 

O ARRAY ORIGINAL... isso acontece 

PQ AQUILO QUE NÓS RECEBEMOS COMO PARÂMETRO (como 'h' dessa função printHobbies) 

__NÃO É___ UMA CÓPIA DO ARRAY EM SI, MAS SIM ___UMA CÓPIA DO ENDEREÇO DESSE ARRAY___....




Por ser uma cópia do ENDEREÇO, ACABAMOS TRABALHANDO COM O EXATO MESMO OBJETO NA MEMÓRIA...

É POR ISSO QUE QUANDO NÓS MUDAMOS O ARRAY DENTRO DA FUNÇÃO, ACABAMOS MUDANDO-O NO LADO 

DE FORA DA FUNÇÃO, também...




RESUMINDO: de novo nós teremos um SIDE EFFECT, ou seja, ESSA FUNÇÃO NÃO SERÁ ___PURA___.




Mas qual é o critério para escolher entre funções puras/impuras?